<?php
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\domain_access\DomainAccessManagerInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\wbumenudomain\WbumenudomainMenuItemDecorating;
use Stephane888\Debug\debugLog;
use Drupal\wbumenudomain\WbumenuDomainFormStep;
use Drupal\Component\Utility\NestedArray;

/**
 * implement hook_entity_base_field_info
 * use command to update : vendor/bin/drush entup
 *
 * @file
 * Primary module hooks for wbumenudomain module.
 *
 * @see https://www.drupal.org/docs/drupal-apis/entity-api/fieldtypes-fieldwidgets-and-fieldformatters to get all types BaseFieldDefinition;
 *     
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */
function wbumenudomain_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() == 'menu_link_content') {
    $fields['wbumenudomain_roles'] = BaseFieldDefinition::create('entity_reference')->setName('wbumenudomain_roles')->setTargetEntityTypeId('menu_link_content')->setLabel(t(" Limite l'affichage du lien pour les roles selectionnées "))->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)->setSetting('target_type', 'user_role')->setDisplayOptions('form', [
      'type' => 'options_buttons',
      'weight' => 0
    ]);
    return $fields;
  }
  elseif ($entity_type->id() === 'block_content') {
    $list = \Drupal::entityTypeManager()->getStorage('domain')->loadOptionsList();
    $fields[DomainAccessManagerInterface::DOMAIN_ACCESS_FIELD] = BaseFieldDefinition::create('list_string')->setLabel(t(' Domain Access '))->setRequired(FALSE)->setSetting('allowed_values', $list)->setDisplayConfigurable('form', TRUE)->setDisplayConfigurable('view', TRUE)->setDisplayOptions('form', [
      'type' => 'options_select',
      'settings' => [],
      'weight' => -3
    ])->setDefaultValueCallback('\Drupal\wbumenudomain\WbumenudomainMenuItemDecorating::getCurrentActiveDomaineByUrl');
    return $fields;
  }
  elseif ($entity_type->id() === "commerce_product") {
    $fields[DomainAccessManagerInterface::DOMAIN_ACCESS_FIELD] = BaseFieldDefinition::create('string')->setLabel(t(' Domain Access (identifiant du domaine) '))->setRequired(TRUE)->setDisplayConfigurable('form', TRUE)->setDisplayConfigurable('view', TRUE)->setDisplayOptions('form', [
      'type' => 'text_textfield'
    ])->setReadOnly(TRUE)->setDefaultValueCallback('\Drupal\wbumenudomain\WbumenudomainMenuItemDecorating::getCurrentActiveDomaineByUrl');
    
    return $fields;
  }
  // debugLog::$max_depth = 1;
  // debugLog::kintDebugDrupal($entity_type, $entity_type->id(), true);
  return $fields;
}

/**
 * implement hook_form_FORM_ID_alter
 *
 * @param array $form
 * @param FormStateInterface $form_state
 * @param string $form_id
 */
function wbumenudomain_form_commerce_product_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!empty($form['field_domain_access'])) {
    if (empty($form['field_domain_access']['widget'][0]['value']['#default_value'])) {
      $domain = WbumenudomainMenuItemDecorating::getCurrentActiveDomaineByUrl();
      // $form['field_domain_access']['widget'][0]['value']['#default_value'] =
      // $domain;
    }
    
    if (!in_array('administrator', \Drupal::currentUser()->getRoles())) {
      $form['field_domain_access']['widget'][0]['value']['#access'] = false;
      $form['field_domain_access']['widget'][0]['value']['#attributes']['readonly'] = 'readonly';
    }
  }
}

/**
 * Implemente hook_theme_suggestions_HOOK_alter
 *
 * @param int $suggestions
 * @param int $variables
 */
function wbumenudomain_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // dump(WbumenudomainMenuItemDecorating::getCurrentActiveDomaineByUrl());
  // if (str_contains(\Drupal::routeMatch()->getRouteName(), "wbumenudomain."))
  // {
  // $suggestions[] = 'page__wbumenudomain';
  // }
  if (str_contains(\Drupal::routeMatch()->getRouteName(), "view.page_menu_principal")) {
    $suggestions[] = 'page__wbumenudomain';
  }
}

/**
 * implement hook_form_FORM_ID_alter
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param string $form_id
 */
function wbumenudomain_form_wbumenudomain_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form["#attributes"]['class'][] = 'my-5';
  // if (!empty($form['hostname']['widget'][0]['value'])) {
  // $form['hostname']['widget'][0]['value']['#ajax'] = [
  // 'callback' => '_wbumenudomain_siteconfig_alter',
  // 'event' => 'change',
  // 'wrapper' => 'wbumenudomain-siteconfig',
  // 'progress' => [
  // 'type' => 'throbber',
  // 'message' => t('Mise à jour des données ...')
  // ],
  // 'disable-refocus' => FALSE
  // ];
  // }
  // $multiStep = new WbumenuDomainFormStep($form, $form_state);
  // $form = $multiStep->build();
}

function wbumenudomain__next_step(&$form, FormStateInterface $form_state) {
  // dump('Validation wbumenudomain__next_step');
}

function wbumenudomain_form_multistep(&$form, FormStateInterface $form_state) {
  // $form_state->set('page_num', 2)->setRebuild(TRUE);
  // dump($form);
  // die();
}

/**
 * implement hook_form_FORM_ID_alter
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param string $form_id
 */
function wbumenudomain_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form["#attributes"]['class'][] = 'container';
  $form["#attributes"]['class'][] = 'my-5';
  // $multiStep = new WbumenuDomainFormStep($form, $form_state);
  // $form = $multiStep->build();
  // debugLog::$max_depth = 7;
  // dump($form);
  // debugLog::kintDebugDrupal($form, 'wbumenudomain_form_node_form_alter', true);
}

function _wbumenudomain_siteconfig_alter($form, FormStateInterface $form_state) {
  // $form_state->setUserInput([]);
  // return $form;
  // debugLog::$max_depth = 10;
  // debugLog::kintDebugDrupal($form_state->getValues(),
  // '_wbumenudomain_siteconfig_getValues');
  
  // name
  // $form['field_site_information']['widget'][0]['siteconf']['container']['name']["#value"]
  // =
  // $form['field_site_information']['widget'][0]['siteconf']['container']['name']["#default_value"];
  //
  // debugLog::kintDebugDrupal($form['field_site_information']['widget'][0]['siteconf']['container']['name'],
  // '_wbumenudomain_siteconfig_alter');
  return $form['field_site_information']['widget'][0]['siteconf']['container'];
}

/**
 * Implements hook_views_data_alter().
 */
function wbumenudomain_views_data_alter(array &$data) {
  // debugLog::$max_depth = 7;
  // debugLog::kintDebugDrupal($data['block_content_field_data'],
  // 'wbumenudomain_views_data_alter' . rand(10, 999));
  /**
   * --
   */
  // $data['block_content_field_data'][DomainAccessManagerInterface::DOMAIN_ACCESS_FIELD]['field']['id']
  // = 'domain_access_field';
  // $data['block_content_field_data'][DomainAccessManagerInterface::DOMAIN_ACCESS_FIELD
  // . '_target_id']['filter']['id'] = 'domain_access_filter';
  // $data['block_content_field_data'][DomainAccessManagerInterface::DOMAIN_ACCESS_FIELD
  // . '_target_id']['argument']['id'] = 'domain_access_argument';
  // // Current domain filter.
  $data['block_content_field_data']['current_domaine'] = [
    'title' => t('Current domain'),
    'group' => t('Domain'),
    'filter' => [
      'field' => DomainAccessManagerInterface::DOMAIN_ACCESS_FIELD,
      'id' => 'wbumenudomain_current_all_filter',
      'title' => t('Available on current domain (2)'),
      'help' => t('Filters out nodes available on current domain (published to current domain or all affiliates).')
    ]
  ];
  
  /**
   * Code example .
   * Cet block de code permet d'alterer la condition where des requetes mysql.
   * Ce block de code permet d'etendre la clause where de la table
   * node_field_data. on identifier notre filtre avec la clée node_type_filter,
   * puis on ajoute un filtre "filter".
   * Deux elements sont important :
   * - field => correspond à la colonne
   * - id => cest l'id du plugin à utilise. ( la liste des plugin est disponible
   * ici :
   * https://api.drupal.org/api/drupal/core!modules!views!src!Plugin!views!filter!FilterPluginBase.php/group/views_filter_handlers/8.2.x)
   */
  // $data['node_field_data']['node_type_filter'] = array(
  // 'title' => t('Enhanced node type filter'),
  // 'filter' => array(
  // 'title' => t('Enhanced node type filter'),
  // 'help' => t('Provides a custom filter for nodes by their type.'),
  // 'field' => 'type',
  // 'id' => 'string'
  // )
  // );
  
  /**
   * Ajout du filtre de domain pour les produits.
   * on identifie notre filtre avec 'product_field_domain_access'.
   * la colonne est definie : 'field'
   * la requete est cree par 'id'
   */
  if (!empty($data['commerce_product_field_data'])) {
    $data['commerce_product_field_data']['product_field_domain_access'] = [
      'title' => t('Current domain'),
      'group' => t('Domain'),
      'filter' => [
        'field' => DomainAccessManagerInterface::DOMAIN_ACCESS_FIELD,
        'id' => 'wbumenudomain_current_domain_product',
        'title' => t('Available on current domain product'),
        'help' => t('Filters out nodes available on current domain (published to current domain or all affiliates).')
      ]
    ];
  }
}

/**
 * Ce code sert de correction à l'affichage des données via menu_lin_content
 * pour les utilisateurs anonyme.
 * https://www.drupal.org/project/menu_item_extras/issues/2925283
 * https://www.drupal.org/project/menu_item_extras/issues/3178103
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param string $operation
 * @param \Drupal\Core\Session\AccountInterface $account
 * @return boolean
 */
function wbumenudomain_entity_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
  if ("menu_link_content" === $entity->getEntityTypeId()) {
    if ($operation == "view")
      return AccessResult::allowed();
  }
}

/**
 * implement hook_ENTITY_TYPE_access
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param string $operation
 * @param \Drupal\Core\Session\AccountInterface $account
 */
function wbumenudomain_commerce_product_access(\Drupal\commerce_product\Entity\Product $product, $operation, \Drupal\Core\Session\AccountInterface $account) {
  if (in_array('administrator', $account->getRoles())) {
    return AccessResult::allowed();
  }
  if ($operation === 'add') {
    return AccessResult::allowed();
  }
  else {
    $domain = $product->get(DomainAccessManagerInterface::DOMAIN_ACCESS_FIELD)->getValue();
    if (!empty($domain)) {
      $domainProduct = reset($domain);
      $condition = $domainProduct['value'] == WbumenudomainMenuItemDecorating::getCurrentActiveDomaineByUrl() ? true : false;
    }
    if (empty($condition))
      return AccessResult::forbidden(" Ce produit n'existe plus ou a été desactivé par ladministrateur.");
    else
      return AccessResult::allowed();
  }
}

/**
 * Perform alterations before the reference form is included in the IEF widget.
 *
 * The reference form is used to add existing entities through an autocomplete
 * field
 *
 * @param array $reference_form
 *        Nested array of form elements that comprise the reference form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *        The form state of the parent form.
 */
function wbumenudomain_inline_entity_form_reference_form_alter(array &$reference_form, FormStateInterface &$form_state) {
  debugLog::kintDebugDrupal($reference_form, 'wbumenudomain_inline_entity_form_reference_form_alter', true);
}

/**
 * S'execute lors de la MAJ d'un elment dans inline_form_entite.
 *
 * @param array $entity_form
 * @param FormStateInterface $form_state
 */
function wbumenudomain_inline_entity_form_entity_form_alter(array &$entity_form, FormStateInterface &$form_state) {
  // debugLog::kintDebugDrupal($entity_form, 'wbumenudomain_inline_entity_form_entity_form_alter', true);
}

function wbumenudomain_inline_entity_form_table_fields_alter(array &$fields, array $context) {
  // debugLog::kintDebugDrupal($fields, 'wbumenudomain_inline_entity_form_table_fields_alter', true);
  if ($context['entity_type'] == 'node') {
    $fields['nid'] = [
      'type' => 'field',
      'label' => 'ID',
      'weight' => 101
    ];
  }
  elseif ($context['entity_type'] == 'block_content') {
    $fields['id'] = [
      'type' => 'field',
      'label' => 'ID',
      'weight' => 101
    ];
  }
}

function wbumenudomain_field_widget_inline_entity_form_complex_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  // $debug = [
  // $element,
  // $context
  // ];
  // debugLog::kintDebugDrupal($debug, 'wbumenudomain_field_widget_inline_entity_form_complex_form_alter', true);
}

function wbumenudomain_field_widget_wbumenudomainhost_complex_inline_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  // debugLog::$max_depth = 5;
  // debugLog::kintDebugDrupal($element, 'wbumenudomain_field_widget_wbumenudomainhost_complex_inline_form_alter', true);
  
  /**
   *
   * @var \Drupal\Core\Field\FieldItemListInterface $items
   */
  $items = $context['items'];
  
  // debugLog::kintDebugDrupal($entities, 'wbumenudomain_field_widget_wbumenudomainhost_complex_inline_form_alter', true);
  // On n'essaie de faire des copie de contenus.
  if ($items->getEntity()->isNew()) {
    
    /**
     *
     * @var \Drupal\wbumenudomain\Plugin\Field\FieldWidget\WbumenudomainComplexInline $widget
     */
    $widget = $context['widget'];
    $ief_id = $widget->_getIefId();
    $entities = $form_state->get([
      'inline_entity_form',
      $ief_id,
      'entities'
    ]);
    
    // uniquement lors de la creation d'un contenu, on duplique les contenus definies par defaut.
    if (!$form_state->get('default_value_widget')) {
      
      if (!empty($entities)) {
        // on met à jour les données present dans $form_state.
        foreach ($entities as $k => $entity) {
          /**
           *
           * @var \Drupal\node\Entity\Node $entity
           */
          $cloneNode = $entity['entity']->createDuplicate();
          $entities[$k]['needs_save'] = true;
          $entities[$k]['form'] = null;
          $entities[$k]['entity'] = $cloneNode;
        }
        //
        $form_state->set([
          'inline_entity_form',
          $ief_id,
          'entities'
        ], $entities);
        // On met à jour les données present dans le bloc d'affichage.
        foreach ($element['entities'] as $k => $entity) {
          if (!empty($entity['#entity'])) {
            /**
             *
             * @var \Drupal\node\Entity\Node $node
             */
            $node = $element['entities'][$k]['#entity'];
            $element['entities'][$k]['#entity'] = $node->createDuplicate();
            $element['entities'][$k]['#needs_save'] = true;
          }
        }
      }
      else {
        $message = "Aucun contenu par defaut pour le champs : " . $items->getName();
        \Drupal::messenger()->addStatus($message);
      }
    }
    // debugLog::kintDebugDrupal($element['entities'][0], 'wbumenudomain_field_widget_wbumenudomainhost_complex_inline_form_alter', true);
    // $form_values = NestedArray::getValue($form_state->getValues(), $reference_form['#parents']);
    // debugLog::kintDebugDrupal($element['entities'][0], 'wbumenudomain_field_widget_wbumenudomainhost_complex_inline_form_alter', true);
  }
  else {
    // $widget = $context['widget'];
    // $ief_id = $widget->_getIefId();
    // $entities = $form_state->get([
    // 'inline_entity_form',
    // $ief_id,
    // 'entities'
    // ]);
    // // dump($entities);
    // foreach ($entities as $vals) {
    // foreach ($vals as $entity) {
    // /**
    // *
    // * @var \Drupal\block_content\Entity\BlockContent $entity
    // */
    // if ($entity instanceof Drupal\block_content\Entity\BlockContent && $entity->getEntityTypeId() == 'block_content') {
    // dump($entity->get('field_domain_access')->getValue());
    // }
    // }
    // }
  }
}































